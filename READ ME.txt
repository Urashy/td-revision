READ ME RENDU API/BLAZOR

Bonjour Mr,

Je précise en premier lieu que dans la solution il y a un fichier d'initialisation de données afin que vous ne vous embêtiez pas a créer des produits (ce n'est pas un stratagème car l'ajout de produit ne marche pas)(vraiment). 

Un fichier reset_données.bat (pour Windows) et un .sh (pour mac et linux) il faut que vous le rendiez exécutable avant de pouvoir l'utiliser (chmod +x reset_données.sh puis ./reset_données.sh).

Fichier utilisable qu'une fois l'api lancée.

1. Quels principes SOLID le code de votre API REST respecte-t-il et lesquels ne respecte-t-il pas ?

- Single Responsibility Principle (SRP) - Partiellement respecté : controllers de marque et typeproduit gèrent la suppression en cascade (si je supprime une marque/type produit je supprime également tout les produits associés, c'est un choix de ma part)
- Open/Closed Principle (OCP) - Bien respecté
- Liskov Substitution Principle (LSP) - Bien respecté
- Dependency Inversion Principle (DIP) - Bien respecté
- Interface Segregation Principle (ISP) - Bien respecté : double interface :  INamedRepository (pour les classes ou le getby string est utile) et IRepository => le manager générique hérite de IRepository et les manager spécifique hérite s'il ont besoin de INamedRepository pour avoir le getbystring 



2. Si vous ne les avez pas appliqués dans votre code, quelles améliorations pourriez-vous mettre en place pour améliorer la qualité du code ? 

- Interface Segregation Principle (ISP) : diviser l'interface en deux ou trois en en ayant une pour les méthodes de read (Getall / getbyid