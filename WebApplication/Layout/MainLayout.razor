@inherits LayoutComponentBase
@inject INotificationService NotificationService
@using WebApplication.Models
@using WebApplication.Services
@implements IDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@if (toastMessages.Any())
{
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 11;">
        @foreach (var toast in toastMessages.ToList())
        {
            <div class="toast show @GetToastClass(toast.Type)" role="alert">
                <div class="toast-header">
                    <i class="@GetToastIcon(toast.Type) me-2"></i>
                    <strong class="me-auto">@GetToastTitle(toast.Type)</strong>
                    <small>@toast.Timestamp.ToString("HH:mm:ss")</small>
                    <button type="button" class="btn-close" @onclick="() => RemoveToast(toast.Id)"></button>
                </div>
                <div class="toast-body">
                    @toast.Message
                </div>
            </div>
        }
    </div>
}

@code {
    private List<NotificationMessage> toastMessages = new();

    protected override void OnInitialized()
    {
        NotificationService.OnNotificationReceived += HandleNotification;
    }

    private void HandleNotification(NotificationMessage notification)
    {
        toastMessages.Add(notification);
        StateHasChanged();

        // Auto-remove after specified duration
        Task.Delay(notification.DurationMs).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                RemoveToast(notification.Id);
            });
        });
    }

    private void RemoveToast(string id)
    {
        var toast = toastMessages.FirstOrDefault(t => t.Id == id);
        if (toast != null)
        {
            toastMessages.Remove(toast);
            StateHasChanged();
        }
    }

    private string GetToastClass(NotificationType type) => type switch
    {
        NotificationType.Success => "bg-success text-white",
        NotificationType.Error => "bg-danger text-white",
        NotificationType.Warning => "bg-warning text-dark",
        NotificationType.Info => "bg-info text-white",
        _ => "bg-light"
    };

    private string GetToastIcon(NotificationType type) => type switch
    {
        NotificationType.Success => "fas fa-check-circle text-white",
        NotificationType.Error => "fas fa-exclamation-circle text-white",
        NotificationType.Warning => "fas fa-exclamation-triangle text-dark",
        NotificationType.Info => "fas fa-info-circle text-white",
        _ => "fas fa-bell"
    };

    private string GetToastTitle(NotificationType type) => type switch
    {
        NotificationType.Success => "Succès",
        NotificationType.Error => "Erreur",
        NotificationType.Warning => "Attention",
        NotificationType.Info => "Information",
        _ => "Notification"
    };

    public void Dispose()
    {
        NotificationService.OnNotificationReceived -= HandleNotification;
    }
}