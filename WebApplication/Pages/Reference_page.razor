@page "/references"
@inject IGenericService<Marque> WSMarque
@inject IGenericService<TypeProduit> WSTypeProduit
@inject INotificationService NotificationService
@inject HttpClient HttpClient
@using WebApplication.Models
@using WebApplication.Services
@using WebApplication.ViewModels
@implements IDisposable

<PageTitle>Gestion des Références</PageTitle>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="text-primary">
                    <i class="fas fa-cog me-2"></i>
                    Gestion des Références
                </h1>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <!-- GESTION DES MARQUES -->
        <div class="col-xl-6 col-lg-12">
            <div class="card shadow">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-trademark me-2"></i>
                        Marques (@_viewModel.NombreMarques)
                    </h4>
                    <button class="btn btn-light btn-sm" @onclick="() => _viewModel.OuvrirModalAjoutMarque()">
                        <i class="fas fa-plus me-1"></i>
                        Ajouter
                    </button>
                </div>
                <div class="card-body">
                    @if (_viewModel.Marques == null)
                    {
                        <div class="text-center py-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                        </div>
                    }
                    else if (!_viewModel.Marques.Any())
                    {
                        <p class="text-muted text-center py-3">Aucune marque enregistrée</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Nom</th>
                                        <th>Nb Produits</th>
                                        <th width="120">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var marque in _viewModel.Marques)
                                    {
                                        <tr>
                                            <td class="fw-bold">@marque.Nom</td>
                                            <td>
                                                <span class="badge bg-info">@marque.NbProduits</span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-warning"
                                                            @onclick="() => _viewModel.OuvrirModalModificationMarque(marque)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                            @onclick="async () => await _viewModel.OuvrirModalSuppressionMarque(marque)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- GESTION DES TYPES DE PRODUITS -->
        <div class="col-xl-6 col-lg-12">
            <div class="card shadow">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-tags me-2"></i>
                        Types de Produits (@_viewModel.NombreTypes)
                    </h4>
                    <button class="btn btn-light btn-sm" @onclick="() => _viewModel.OuvrirModalAjoutType()">
                        <i class="fas fa-plus me-1"></i>
                        Ajouter
                    </button>
                </div>
                <div class="card-body">
                    @if (_viewModel.TypesProduit == null)
                    {
                        <div class="text-center py-3">
                            <div class="spinner-border text-success" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                        </div>
                    }
                    else if (!_viewModel.TypesProduit.Any())
                    {
                        <p class="text-muted text-center py-3">Aucun type de produit enregistré</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Nom</th>
                                        <th>Nb Produits</th>
                                        <th width="120">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var type in _viewModel.TypesProduit)
                                    {
                                        <tr>
                                            <td class="fw-bold">@type.Nom</td>
                                            <td>
                                                <span class="badge bg-info">@type.NbProduits</span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-warning"
                                                            @onclick="() => _viewModel.OuvrirModalModificationType(type)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                            @onclick="async () => await _viewModel.OuvrirModalSuppressionType(type)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- MODAL MARQUE -->
@if (_viewModel.ShowModalMarque)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas @_viewModel.IconeBoutonMarque me-2"></i>
                        @_viewModel.TitreModalMarque
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => _viewModel.FermerModalMarque()"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(_viewModel.ErrorMessageMarque))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @_viewModel.ErrorMessageMarque
                        </div>
                    }

                    <div class="mb-3">
                        <label for="nomMarque" class="form-label">
                            Nom de la marque <span class="text-danger">*</span>
                        </label>
                        <input type="text" id="nomMarque" class="form-control"
                               @bind="_viewModel.MarqueEnCours.Nom"
                               placeholder="Entrez le nom de la marque" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => _viewModel.FermerModalMarque()">
                        Annuler
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="ValiderMarqueAsync" disabled="@_viewModel.IsSubmittingMarque">
                        @if (_viewModel.IsSubmittingMarque)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="fas @_viewModel.IconeBoutonMarque me-2"></i>
                        }
                        @_viewModel.TexteBoutonMarque
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- MODAL TYPE -->
@if (_viewModel.ShowModalType)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">
                        <i class="fas @_viewModel.IconeBoutonType me-2"></i>
                        @_viewModel.TitreModalType
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => _viewModel.FermerModalType()"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(_viewModel.ErrorMessageType))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @_viewModel.ErrorMessageType
                        </div>
                    }

                    <div class="mb-3">
                        <label for="nomType" class="form-label">
                            Nom du type de produit <span class="text-danger">*</span>
                        </label>
                        <input type="text" id="nomType" class="form-control"
                               @bind="_viewModel.TypeEnCours.Nom"
                               placeholder="Entrez le nom du type de produit" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => _viewModel.FermerModalType()">
                        Annuler
                    </button>
                    <button type="button" class="btn btn-success" @onclick="ValiderTypeAsync" disabled="@_viewModel.IsSubmittingType">
                        @if (_viewModel.IsSubmittingType)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="fas @_viewModel.IconeBoutonType me-2"></i>
                        }
                        @_viewModel.TexteBoutonType
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- MODAL SUPPRESSION MARQUE -->
@if (_viewModel.ShowModalSuppressionMarque && _viewModel.MarqueASupprimer != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Confirmer la suppression
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => _viewModel.FermerModalSuppressionMarque()"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center">
                        <i class="fas fa-trademark fa-4x text-danger mb-3"></i>
                        <p class="lead">Êtes-vous sûr de vouloir supprimer la marque :</p>
                        <p class="fw-bold fs-5 text-danger">"@_viewModel.MarqueASupprimer.Nom"</p>

                        @if (_viewModel.NombreProduitsMarque > 0)
                        {
                            <div class="alert alert-warning mt-3">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Attention :</strong> @_viewModel.NombreProduitsMarque produit(s) seront également supprimé(s) !
                            </div>
                        }

                        <p class="text-muted">Cette action est irréversible.</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => _viewModel.FermerModalSuppressionMarque()">Annuler</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmerSuppressionMarqueAsync" disabled="@_viewModel.IsSubmittingSuppressionMarque">
                        @if (_viewModel.IsSubmittingSuppressionMarque)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="fas fa-trash me-2"></i>
                        }
                        @(_viewModel.IsSubmittingSuppressionMarque ? "Suppression..." : "Supprimer définitivement")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- MODAL SUPPRESSION TYPE -->
@if (_viewModel.ShowModalSuppressionType && _viewModel.TypeASupprimer != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Confirmer la suppression
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => _viewModel.FermerModalSuppressionType()"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center">
                        <i class="fas fa-tags fa-4x text-danger mb-3"></i>
                        <p class="lead">Êtes-vous sûr de vouloir supprimer le type de produit :</p>
                        <p class="fw-bold fs-5 text-danger">"@_viewModel.TypeASupprimer.Nom"</p>

                        @if (_viewModel.NombreProduitsType > 0)
                        {
                            <div class="alert alert-warning mt-3">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Attention :</strong> @_viewModel.NombreProduitsType produit(s) seront également supprimé(s) !
                            </div>
                        }

                        <p class="text-muted">Cette action est irréversible.</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => _viewModel.FermerModalSuppressionType()">Annuler</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmerSuppressionTypeAsync" disabled="@_viewModel.IsSubmittingSuppressionType">
                        @if (_viewModel.IsSubmittingSuppressionType)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="fas fa-trash me-2"></i>
                        }
                        @(_viewModel.IsSubmittingSuppressionType ? "Suppression..." : "Supprimer définitivement")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private ReferenceViewModel _viewModel = null!;

    protected override async Task OnInitializedAsync()
    {
        _viewModel = new ReferenceViewModel(WSMarque, WSTypeProduit, NotificationService, HttpClient);
        _viewModel.PropertyChanged += OnViewModelPropertyChanged;
        await _viewModel.InitialiserAsync();
    }

    private void OnViewModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task ValiderMarqueAsync()
    {
        await _viewModel.ValiderMarqueAsync();
    }

    private async Task ConfirmerSuppressionMarqueAsync()
    {
        await _viewModel.ConfirmerSuppressionMarqueAsync();
    }

    private async Task ValiderTypeAsync()
    {
        await _viewModel.ValiderTypeAsync();
    }

    private async Task ConfirmerSuppressionTypeAsync()
    {
        await _viewModel.ConfirmerSuppressionTypeAsync();
    }

    public void Dispose()
    {
        if (_viewModel != null)
        {
            _viewModel.PropertyChanged -= OnViewModelPropertyChanged;
        }
    }
}