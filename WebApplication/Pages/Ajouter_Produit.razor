@page "/produits/ajouter"
@inject AjouterProduitViewModel ViewModel
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Ajouter un produit</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">
                        <i class="fas fa-plus-circle me-2"></i>
                        Ajouter un nouveau produit
                    </h3>
                </div>

                <!-- Modal pour ajouter une nouvelle marque -->
                @if (ViewModel.ShowModalMarque)
                {
                    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">
                                        <i class="fas fa-plus-circle me-2"></i>
                                        Ajouter une nouvelle marque
                                    </h5>
                                    <button type="button" class="btn-close" @onclick="ViewModel.FermerModalMarque"></button>
                                </div>
                                <div class="modal-body">
                                    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessageMarque))
                                    {
                                        <div class="alert alert-danger" role="alert">
                                            <i class="fas fa-exclamation-triangle me-2"></i>
                                            @ViewModel.ErrorMessageMarque
                                        </div>
                                    }

                                    <div class="mb-3">
                                        <label for="nouvelleMarque" class="form-label">
                                            Nom de la marque <span class="text-danger">*</span>
                                        </label>
                                        <input type="text" id="nouvelleMarque" class="form-control"
                                               @bind="ViewModel.NouvelleMarque.Nom"
                                               placeholder="Entrez le nom de la marque"
                                               @onkeypress="@(async (e) => { if (e.Key == "Enter") await ViewModel.AjouterMarqueAsync(); })" />
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" @onclick="ViewModel.FermerModalMarque">
                                        Annuler
                                    </button>
                                    <button type="button" class="btn btn-primary" @onclick="ViewModel.AjouterMarqueAsync" disabled="@ViewModel.IsSubmittingMarque">
                                        @if (ViewModel.IsSubmittingMarque)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-save me-2"></i>
                                        }
                                        @(ViewModel.IsSubmittingMarque ? "Ajout..." : "Ajouter")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Modal pour ajouter un nouveau type de produit -->
                @if (ViewModel.ShowModalType)
                {
                    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">
                                        <i class="fas fa-plus-circle me-2"></i>
                                        Ajouter un nouveau type de produit
                                    </h5>
                                    <button type="button" class="btn-close" @onclick="ViewModel.FermerModalType"></button>
                                </div>
                                <div class="modal-body">
                                    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessageType))
                                    {
                                        <div class="alert alert-danger" role="alert">
                                            <i class="fas fa-exclamation-triangle me-2"></i>
                                            @ViewModel.ErrorMessageType
                                        </div>
                                    }

                                    <div class="mb-3">
                                        <label for="nouveauType" class="form-label">
                                            Nom du type de produit <span class="text-danger">*</span>
                                        </label>
                                        <input type="text" id="nouveauType" class="form-control"
                                               @bind="ViewModel.NouveauType.Nom"
                                               placeholder="Entrez le nom du type"
                                               @onkeypress="@(async (e) => { if (e.Key == "Enter") await ViewModel.AjouterTypeAsync(); })" />
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" @onclick="ViewModel.FermerModalType">
                                        Annuler
                                    </button>
                                    <button type="button" class="btn btn-primary" @onclick="ViewModel.AjouterTypeAsync" disabled="@ViewModel.IsSubmittingType">
                                        @if (ViewModel.IsSubmittingType)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-save me-2"></i>
                                        }
                                        @(ViewModel.IsSubmittingType ? "Ajout..." : "Ajouter")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <div class="card-body">
                    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @ViewModel.ErrorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            @ViewModel.SuccessMessage
                        </div>
                    }

                    <EditForm Model="@ViewModel.Produit" OnValidSubmit="@SoumettreFormulaire">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="row">
                            <!-- Nom du produit -->
                            <div class="col-md-12 mb-3">
                                <label for="nom" class="form-label">
                                    Nom du produit <span class="text-danger">*</span>
                                </label>
                                <InputText id="nom" class="form-control" @bind-Value="ViewModel.Produit.Nom" placeholder="Entrez le nom du produit" />
                                <ValidationMessage For="@(() => ViewModel.Produit.Nom)" />
                            </div>
                        </div>

                        <div class="row">
                            <!-- Marque -->
                            <div class="col-md-6 mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <label for="marque" class="form-label mb-0">
                                        Marque <span class="text-danger">*</span>
                                    </label>
                                    <button type="button" class="btn btn-sm btn-outline-primary"
                                            @onclick="ViewModel.OuvrirModalMarque">
                                        <i class="fas fa-plus"></i> Nouvelle marque
                                    </button>
                                </div>
                                <select id="marque" class="form-select" @bind="ViewModel.Produit.Marque">
                                    <option value="">-- Sélectionnez une marque --</option>
                                    @if (ViewModel.MarquesDisponibles != null)
                                    {
                                        @foreach (var marque in ViewModel.MarquesDisponibles)
                                        {
                                            <option value="@marque.Nom">@marque.Nom</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => ViewModel.Produit.Marque)" />
                            </div>

                            <!-- Type de produit -->
                            <div class="col-md-6 mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <label for="type" class="form-label mb-0">
                                        Type de produit <span class="text-danger">*</span>
                                    </label>
                                    <button type="button" class="btn btn-sm btn-outline-primary"
                                            @onclick="ViewModel.OuvrirModalType">
                                        <i class="fas fa-plus"></i> Nouveau type
                                    </button>
                                </div>
                                <select id="type" class="form-select" @bind="ViewModel.Produit.Type">
                                    <option value="">-- Sélectionnez un type --</option>
                                    @if (ViewModel.TypesDisponibles != null)
                                    {
                                        @foreach (var type in ViewModel.TypesDisponibles)
                                        {
                                            <option value="@type.Nom">@type.Nom</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => ViewModel.Produit.Type)" />
                            </div>
                        </div>

                        <!-- Section Gestion des Stocks -->
                        <div class="card mb-3 bg-light">
                            <div class="card-body">
                                <h5 class="card-title mb-3">
                                    <i class="fas fa-boxes me-2"></i>
                                    Gestion des stocks
                                </h5>
                                <div class="row">
                                    <!-- Stock réel -->
                                    <div class="col-md-4 mb-3">
                                        <label for="stock" class="form-label">
                                            Stock initial
                                            <i class="fas fa-info-circle text-muted" title="Quantité actuelle en stock"></i>
                                        </label>
                                        <InputNumber id="stock" class="form-control" @bind-Value="ViewModel.Produit.Stock" placeholder="0" />
                                        <ValidationMessage For="@(() => ViewModel.Produit.Stock)" />
                                    </div>

                                    <!-- Stock minimum -->
                                    <div class="col-md-4 mb-3">
                                        <label for="stockMin" class="form-label">
                                            Stock minimum
                                            <i class="fas fa-info-circle text-muted" title="Seuil d'alerte pour réapprovisionnement"></i>
                                        </label>
                                        <InputNumber id="stockMin" class="form-control" @bind-Value="ViewModel.StockMin" placeholder="0" />
                                        <small class="form-text text-muted">Seuil de réapprovisionnement</small>
                                    </div>

                                    <!-- Stock maximum -->
                                    <div class="col-md-4 mb-3">
                                        <label for="stockMax" class="form-label">
                                            Stock maximum
                                            <i class="fas fa-info-circle text-muted" title="Capacité maximale de stockage"></i>
                                        </label>
                                        <InputNumber id="stockMax" class="form-control" @bind-Value="ViewModel.StockMax" placeholder="100" />
                                        <small class="form-text text-muted">Capacité maximale</small>
                                    </div>
                                </div>

                                @if (ViewModel.AfficherAlerteStockMin)
                                {
                                    <div class="alert alert-warning d-flex align-items-center" role="alert">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        <div>Le stock initial est inférieur au stock minimum. Un réapprovisionnement sera nécessaire.</div>
                                    </div>
                                }

                                @if (ViewModel.AfficherAlerteStockMax)
                                {
                                    <div class="alert alert-danger d-flex align-items-center" role="alert">
                                        <i class="fas fa-times-circle me-2"></i>
                                        <div>Le stock initial dépasse le stock maximum autorisé.</div>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Description -->
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" class="form-control" rows="4"
                                           @bind-Value="ViewModel.Produit.Description"
                                           placeholder="Décrivez le produit..." />
                            <ValidationMessage For="@(() => ViewModel.Produit.Description)" />
                        </div>

                        <!-- Section Images -->
                        <div class="mb-4">
                            <h5 class="mb-3">
                                <i class="fas fa-images me-2"></i>
                                Images du produit
                            </h5>

                            <!-- Liste des images ajoutées -->
                            @if (ViewModel.Images.Any())
                            {
                                <div class="row mb-3">
                                    @for (int i = 0; i < ViewModel.Images.Count; i++)
                                    {
                                        var index = i;
                                        var image = ViewModel.Images[index];
                                        <div class="col-md-4 mb-2">
                                            <div class="card">
                                                <div class="card-body p-2">
                                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                                        <small class="text-muted">Image @(index + 1)</small>
                                                        <button type="button" class="btn btn-sm btn-outline-danger"
                                                                @onclick="() => ViewModel.SupprimerImage(index)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                    <div class="mb-2">
                                                        <input type="text" class="form-control form-control-sm mb-1"
                                                               placeholder="Nom de l'image"
                                                               @bind="image.NomImage" />
                                                        <input type="url" class="form-control form-control-sm"
                                                               placeholder="URL de l'image"
                                                               @bind="image.UrlPhoto" />
                                                    </div>
                                                    @if (!string.IsNullOrEmpty(image.UrlPhoto))
                                                    {
                                                        <img src="@image.UrlPhoto" alt="Aperçu"
                                                             class="img-fluid rounded"
                                                             style="max-height: 100px; object-fit: cover; width: 100%;"
                                                             onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                                                        <div style="display: none; padding: 20px; background-color: #f8f9fa; text-align: center; border-radius: 4px;">
                                                            <i class="fas fa-exclamation-triangle text-warning"></i>
                                                            <small class="text-muted d-block">Image non accessible</small>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }

                            <!-- Bouton ajouter image -->
                            <button type="button" class="btn btn-outline-secondary" @onclick="ViewModel.AjouterImage">
                                <i class="fas fa-plus me-2"></i>
                                Ajouter une image
                            </button>
                        </div>

                        <!-- Boutons d'action -->
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="Annuler">
                                <i class="fas fa-times me-2"></i>
                                Annuler
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@ViewModel.IsSubmitting">
                                @if (ViewModel.IsSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                }
                                @(ViewModel.IsSubmitting ? "Ajout en cours..." : "Ajouter le produit")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await ViewModel.InitialiserAsync();
        ViewModel.PropertyChanged += OnViewModelPropertyChanged;
    }

    private void OnViewModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task SoumettreFormulaire()
    {
        var success = await ViewModel.AjouterProduitAsync();
        if (success)
        {
            await Task.Delay(2000);
            Navigation.NavigateTo("/produits");
        }
    }

    private void Annuler()
    {
        Navigation.NavigateTo("/produits");
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnViewModelPropertyChanged;
    }
}