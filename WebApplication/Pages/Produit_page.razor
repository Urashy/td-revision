@page "/produits"
@inject IGenericService<Marque> WSMarque
@inject IGenericService<Produit> WSProduit
@inject IGenericService<TypeProduit> WSTypeProduit
@inject IGenericService<Image> WSImage
@using WebApplication.Models
@using WebApplication.Services

<h1>Produits</h1>

<div class="filters-section" style="margin-bottom: 20px; padding: 15px; background-color: #f8f9fa; border-radius: 5px;">
    <div class="row">
        <div class="col-md-4">
            <label for="searchNom" class="form-label">Recherche par nom :</label>
            <input type="text" id="searchNom" class="form-control" placeholder="Nom du produit..."
                   @bind="searchNom" @oninput="OnSearchChanged" />
        </div>

        <div class="col-md-4">
            <label for="filterType" class="form-label">Filtrer par type :</label>
            <select id="filterType" class="form-select" @bind="SelectedType">
                <option value="">-- Tous les types --</option>
                @if (typesDisponibles != null)
                {
                    @foreach (var type in typesDisponibles)
                    {
                        <option value="@type.Nom">@type.Nom</option>
                    }
                }
            </select>
        </div>

        <div class="col-md-4">
            <label for="filterMarque" class="form-label">Filtrer par marque :</label>
            <select id="filterMarque" class="form-select" @bind="SelectedMarque">
                <option value="">-- Toutes les marques --</option>
                @if (marquesDisponibles != null)
                {
                    @foreach (var marque in marquesDisponibles)
                    {
                        <option value="@marque.Nom">@marque.Nom</option>
                    }
                }
            </select>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-12">
            <button class="btn btn-secondary btn-sm" @onclick="ClearFilters">Effacer les filtres</button>
            <span class="ms-3 text-muted">@produitsFiltres?.Count() résultat(s) trouvé(s)</span>
        </div>
    </div>
</div>

<div class="content">
    @if (produits == null)
    {
        <p><em>Chargement...</em></p>
    }
    else if (!produitsFiltres.Any())
    {
        <p>Aucun produit trouvé avec ces critères.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nom</th>
                    <th>Description</th>
                    <th>Marque</th>
                    <th>Type de Produit</th>
                    <th>Stock Réel</th>
                    <th>Photos</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var produit in produitsFiltres)
                {
                    <tr>
                        <td>@produit.Nom</td>
                        <td>@produit.Description</td>
                        <td>@produit.Marque</td>
                        <td>@produit.Type</td>
                        <td>@produit.Stock</td>
                        <td>
                            @if (imagesProduits.ContainsKey(produit.IdProduit) && imagesProduits[produit.IdProduit].Any())
                            {
                                <div class="d-flex flex-wrap gap-1">
                                    @foreach (var image in imagesProduits[produit.IdProduit].Take(3)) // Afficher max 3 images
                                    {
                                        <img src="@image.UrlPhoto" alt="@image.NomImage"
                                             style="max-width: 40px; max-height: 40px; object-fit: cover; border-radius: 3px;"
                                             title="@image.NomImage" />
                                    }
                                    @if (imagesProduits[produit.IdProduit].Count() > 3)
                                    {
                                        <span class="text-muted small">+@(imagesProduits[produit.IdProduit].Count() - 3)</span>
                                    }
                                </div>
                            }
                            else
                            {
                                <span class="text-muted">Aucune image</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<!-- Modal pour afficher les images en grand (optionnel) -->
@if (showImageModal && selectedImages != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Images du produit</h5>
                    <button type="button" class="btn-close" @onclick="CloseImageModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        @foreach (var image in selectedImages)
                        {
                            <div class="col-md-4 mb-3">
                                <img src="@image.UrlPhoto" alt="@image.NomImage" class="img-fluid" />
                                <p class="text-center small mt-1">@image.NomImage</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<Produit>? produits;
    private IEnumerable<Produit> produitsFiltres = new List<Produit>();

    // Dictionnaire pour stocker les images par produit
    private Dictionary<int, List<Image>> imagesProduits = new Dictionary<int, List<Image>>();

    // Propriétés avec setter qui appliquent automatiquement les filtres
    private string searchNom = "";

    private string selectedType = "";
    private string SelectedType
    {
        get => selectedType;
        set
        {
            selectedType = value;
            ApplyFilters();
        }
    }

    private string selectedMarque = "";
    private string SelectedMarque
    {
        get => selectedMarque;
        set
        {
            selectedMarque = value;
            ApplyFilters();
        }
    }

    // Listes pour les dropdowns
    private List<Marque>? marquesDisponibles;
    private List<TypeProduit>? typesDisponibles;

    // Variables pour le modal d'images (optionnel)
    private bool showImageModal = false;
    private List<Image>? selectedImages;

    protected override async Task OnInitializedAsync()
    {
        // Charger les produits
        produits = await WSProduit.GetAllAsync();

        // Charger les marques depuis l'API
        var marquesResponse = await WSMarque.GetAllAsync();
        marquesDisponibles = marquesResponse?.ToList();

        Console.WriteLine($"Marques chargées : {marquesDisponibles?.Count}");

        // Charger les types depuis l'API
        var typesResponse = await WSTypeProduit.GetAllAsync();
        typesDisponibles = typesResponse?.ToList();

        // Charger toutes les images et les organiser par produit
        await LoadProductImages();

        // Initialiser la liste filtrée
        ApplyFilters();
    }

    private async Task LoadProductImages()
    {
        try
        {
            // Charger toutes les images
            var allImages = await WSImage.GetAllAsync();

            if (allImages != null && produits != null)
            {
                // Organiser les images par IdProduit
                imagesProduits = allImages
                    .GroupBy(img => img.IdProduit) // Remplacez par la propriété correcte
                    .ToDictionary(g => g.Key, g => g.ToList());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des images : {ex.Message}");
            imagesProduits = new Dictionary<int, List<Image>>();
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchNom = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void OnFilterChanged()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (produits == null)
        {
            produitsFiltres = new List<Produit>();
            return;
        }

        produitsFiltres = produits.Where(p =>
            // Filtre par nom (recherche insensible à la casse)
            (string.IsNullOrEmpty(searchNom) ||
             (p.Nom?.Contains(searchNom, StringComparison.OrdinalIgnoreCase) ?? false)) &&

            // Filtre par type
            (string.IsNullOrEmpty(selectedType) || p.Type == selectedType) &&

            // Filtre par marque
            (string.IsNullOrEmpty(selectedMarque) || p.Marque == selectedMarque)
        );

        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchNom = "";
        selectedType = "";
        selectedMarque = "";
        ApplyFilters();
    }

    // Méthodes pour le modal d'images (optionnel)
    private void ShowProductImages(int produitId)
    {
        if (imagesProduits.ContainsKey(produitId))
        {
            selectedImages = imagesProduits[produitId];
            showImageModal = true;
        }
    }

    private void CloseImageModal()
    {
        showImageModal = false;
        selectedImages = null;
    }
}